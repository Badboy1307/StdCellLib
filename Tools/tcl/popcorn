#!/usr/bin/env tclsh
#   ************    LibreSilicon's StdCellLibrary   *******************
#
#   Organisation:   Chipforge
#                   Germany / European Union
#
#   Profile:        Chipforge focus on fine System-on-Chip Cores in
#                   Verilog HDL Code which are easy understandable and
#                   adjustable. For further information see
#                           www.chipforge.org
#                   there are projects from small cores up to PCBs, too.
#
#   File:           popcorn
#
#   Purpose:        Generates a bunch of combinatorial cells
#
#   ************    Tcl 8.6 Shell Script    ***************************
#
#   ///////////////////////////////////////////////////////////////////
#
#       Copyright (c)   2018 by
#                       SANKOWSKI, Hagen - hsank@nospam.chipforge.org
#
#   This source file may be used and distributed without restriction
#   provided that this copyright statement is not removed from the
#   file and that any derivative work contains the original copyright
#   notice and the associated disclaimer.
#
#   This source is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This source is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#    (__)  You should have received a copy of the GNU General Public
#    oo )  License along with this program; if not, write to the
#    /_/|  Free Software Foundation Inc., 51 Franklin St., 5th Floor,
#          Boston, MA 02110-1301, USA
#
#   GNU General Public License v3.0 - http://www.gnu.org/licenses/gpl-3.0.html
#   ///////////////////////////////////////////////////////////////////

#   -------------------------------------------------------------------
#                       DESCRIPTION
#   -------------------------------------------------------------------

#   This tool generates transistor networks for Standard Cells.
#   Usually - for CMOS - this transistor networks are
#       * one pull-up network, build with pmos transistors, and
#       * one pull-down network, build with nmos transistors.

#   --------*---------  vdd
#        ___|___
#       |       |
#       | pull- |
#       |  up   |
#       |_______|
#           |
#           *-------->  Z
#        ___|___
#       |       |
#       | pull- |
#       | down  |
#       |_______|
#           |
#   --------*---------  gnd

#   -------------------------------------------------------------------
#                       DEFINITIONS
#   -------------------------------------------------------------------

#   seed library with know cells

#   array index is cellid, the content structure is a list with
#   { { pull-up network } { pull-down network } }, where every pullup/pulldown network
#   is a list of transistors itself {{ gate drain source mosfet }..}
set library(INV)        {{{A Z vdd pmos}} {{A Z gnd nmos}}}
set library(NOR2)       {{{B 1 vdd pmos} {A Z 1 pmos}} {{A Z gnd nmos} {B Z gnd nmos}}}
set library(NAND2)      {{{B Z vdd pmos} {A Z vdd pmos}} {{A Z 2 nmos} {B 2 gnd nmos}}}

#   ------------    proc 'export!'  -----------------------------------

#   write into fresh cell file

#   use $library list structure
proc export! {path cellid netlist} {

    global verbose

    # open cell output file
    set datafile [file join $path $cellid\.cell]
    set f [open $datafile w]

    # verbose message
    if {$verbose} {
        puts "export: $datafile"
    }

    # write out
    puts $f ".AUTOGENERATED by Popcorn Tcl Script"
    puts $f ".ORDER \"Gate Drain Source MOSFET\""
    foreach network $netlist {
        foreach mosfet $network {
            puts $f $mosfet
        }
    }

    # done
    close $f
}

#   -------------------------------------------------------------------
#                       FUNCTIONS
#   -------------------------------------------------------------------

#   ------------    proc 'nodes?'   -----------------------------------

#   list all nodes involved in any network in a decreasing order

proc nodes? {network} {

    global verbose

    # work out
    set unsorted {}
    foreach mosfet $network {
        lappend unsorted [lindex $mosfet 1] ; # drain is 2nd element in list
        lappend unsorted [lindex $mosfet 2] ; # source is 3rd element in list
    }

    # sort list decreasing and unique
    set nodes [lsort -decreasing -unique -dictionary $unsorted]

    # verbose message
    if {$verbose} {
        puts "nodes?: $unsorted > $nodes"
    }

    # done
    return $nodes
}

#   ------------    proc 'pullup_nodes?'    ---------------------------

#   list all nodes involved in pullup network in a decreasing order

proc pullup_nodes? {netlist} {

    # wrapper
    return [nodes? [lindex $netlist 0]] ; # pullup network is the 1st element in list
}

#   ------------    proc 'pulldown_nodes?'  ---------------------------

#   list all nodes involved in pulldown network in a decreasing order

proc pulldown_nodes? {netlist} {

    # wrapper
    return [nodes? [lindex $netlist 1]] ; # pulldown network is the 2nd element in list
}

#   ------------    proc 'maxnode?' -----------------------------------

#   get highest node in network (w/ maximum number)

proc maxnode? {network} {

    global verbose

    # work out
    set nodes [nodes? $network] 
    set maxnode -1
    foreach item $nodes {
        if {[string is entier $item]} {
            set maxnode $item
            break
        }
    }

    # verbose message
    if {$verbose} {
        puts "maxnode?: $maxnode"
    }

    # done
    return $maxnode
}

#   ------------    proc 'pullup_maxnode?'  ---------------------------

#   get highest node in pullup network (w/ maximum number)

proc pullup_maxnode? {netlist} {

    # wrapper
    return [maxnode? [lindex $netlist 0]] ; # pulldown network is the 1st element in list
}

#   ------------    proc 'pulldown_maxnode?'    -----------------------

#   get highest node in pulldown network (w/ maximum number)

proc pulldown_maxnode? {netlist} {

    # wrapper
    set maxnode [maxnode? [lindex $netlist 1]] ; # pullup network is the 2nd element in list
    if {$maxnode eq -1} {
        return 0
    } else {
        return $maxnode
    }
}

#   ------------    proc 'inputs?'  -----------------------------------

#   list all inputs involved in any network in a decreasing order

proc inputs? {network} {

    global verbose

    # collect all inputs form pullup network
    set unsorted {}
    foreach mosfet $network {
        lappend unsorted [lindex [lindex $mosfet 0] 0] ; # gate is 1st element in list
    }
    # sort inputs
    set inputs [lsort -decreasing -unique -dictionary $unsorted_up]

    # verbose message
    if {$verbose} {
        puts "inputs?: $inputs"
    }

    # done
    return $inputs
}

#   ------------    proc 'pullup_inputs?'   ---------------------------

#   list all inputs involved in pullup network in a decreasing order

proc pullup_inputs? {netlist} {

    # wrapper
    return [inputs? [lindex $netlist 0]] ; # pullup network is the 1st element in list
}

#   ------------    proc 'pulldown_inputs?'     -----------------------

#   list all inputs involved in pulldown network in a decreasing order

proc pulldown_inputs? {netlist} {

    # wrapper
    return [inputs? [lindex $netlist 1]] ; # pulldown network is the 2nd element in list
}

#   ------------    proc 'column?'  -----------------------------------

#   find first column in any network which is shorter than 'stacked' option

proc column? {from to depth network} {

    global verbose
    global option_stacked

    # work out
    set column {}
    if {$option_stacked eq $depth} {
        # maximum depth reached, abort
        set column {}
    } else {
        foreach mosfet $network {
            # check network for $from on mosfet as drain
            if {[lindex $mosfet 1] eq $from} {

                # check all transistor sources as next nodes
                set next_node [lindex $mosfet 2]
                if {$next_node eq $to} {
                    # found last transistor in chain
                    set column [list $mosfet]
                    break
                } else {
                    # current node is intermediate, go deeper
                    set column [column? $next_node $to [incr depth] $network]
                }
                if {$column ne {}} {
                    set column [lappend column $mosfet]
                }
            }
        }
    }

    # verbose message
    if {$verbose} {
        puts "column?: $depth $option_stacked $column"
    }

    # done
    return $column
}

#   ------------    proc 'column_pullup?'   ---------------------------

#   find first column in pullup network which is shorter than 'stacked' option

proc column_pullup? {from to depth netlist} {

    # wraper
    return [column? $from $to $depth [lindex $netlist 0]] ; # pullup network is the 1st element in list
}

#   ------------    proc 'column_pulldown?'     -----------------------

#   find first column in pullup network which is shorter than 'stacked' option

proc column_pulldown? {from to depth netlist} {

    # wraper
    return [column? $from $to $depth [lindex $netlist 1]] ; # pulldown network is the 2nd element in list
}

#   ------------    proc 'input_number!'    ---------------------------

#   generate input (gate) name from $input following the numbers

proc input_number! {input} {

    global verbose

    # work out
    set number 1
    set char [string range $input 0 0]
    if {[string length $input] > 1} {
        # input (gate) name already has a number
        set number [expr [string range $input 1 end] +1]
    }
    # combine char and number
    set input [string cat $char $number]

    # verbose message
    if {$verbose} {
        puts "input_number!: $input"
    }

    # done
    return $input
}

#   ------------    proc 'input_char!'  -------------------------------

#   generate input (gate) name from $input following the alphabet

proc input_char! {input} {

    global verbose

    # usable inputs
    set table {A B C D E F G H J K L M N P T U V W}

    # work out
    set input [lindex $table [expr [lsearch -exact $table $input] +1]]

    # verbose message
    if {$verbose} {
        puts "input_char!: $input"
    }

    # done
    return $input
}

#   ------------    proc 'enlarge_nand!'    ---------------------------

#   find not fully filled column in pulldown network and enlarge both networks

proc enlarge_nand! {netlist} {

    global verbose

    # start with pulldown network
    set network [lindex $netlist 1] ; # pulldown network is the 2nd element in list
    set column [column? "Z" "gnd" 1 $network] ; # find free column

    if {$column eq {}} {
        set netlist $column
    } else {
        # identify mosfet to replace with higher node number
        set orgfet [lindex $column 0] ; # mosfet on most-left position on column

        set index [lsearch $network $orgfet] ; # network position where to replace

        # prepare replacement
        set node [expr [pulldown_maxnode? $netlist] +2] ; # get highest node number, add 2, for connectivity
        set patch [lreplace $orgfet 2 2 $node] ; # path original mosfet with new node number
        set gate [lindex $orgfet 0] ; # get current input / gate name
        set newgate [input_char! $gate] ; # generate next input / gate name
        set newfet [list $newgate $node gnd nmos]; # combine new mosfet to add

        # extend pulldown column
        set pulldown [concat [lreplace $network $index $index $patch] [list $newfet]] ; # patch original mosfet and add new one

        # follow up with pullup network
        set network [lindex $netlist 0] ; # pulldown network is the 1st element in list

        # identify mosfet to "double"
        foreach mosfet $network {
            if {[lindex $mosfet 0] eq $gate} {
                set orgfet $mosfet
                break
            }
        }

        # prepare addition
        set newfet [lreplace $orgfet 0 0 $newgate]

        # extend pullup row
        set pullup [concat $network [list $newfet]]

        set netlist [list [lsort -decreasing $pullup] [lsort $pulldown]]
    }
    # verbose message
    if {$verbose} {
        puts "enlarge_nand!: $netlist"
    }

    # done
    return $netlist
}

#   ------------    proc 'enlarge_nor!'     ---------------------------

#   find not fully developed column in pullup network and enlarge both networks

proc enlarge_nor! {netlist} {

    global verbose

    # start with pullup network
    set network [lindex $netlist 0] ; # pullup network is the 1st element in list
    set column [column? "Z" "vdd" 1 $network] ; # find free column

    if {$column eq {}} {
        set netlist $column
    } else {
        # identify mosfet to replace with higher node number
        set orgfet [lindex $column 0] ; # mosfet on most-left position on column

        set index [lsearch $network $orgfet] ; # network position where to replace

        # prepare replacement
        set node [expr [pullup_maxnode? $netlist] +2] ; # get highest node number, add 2, for connectivity
        set patch [lreplace $orgfet 2 2 $node] ; # path original mosfet with new node number
        set gate [lindex $orgfet 0] ; # get current input / gate name
        set newgate [input_number! $gate] ; # generate next input / gate name
        set newfet [list $newgate $node vdd pmos]; # combine new mosfet to add

        # extend pulldown column
        set pullup [concat [lreplace $network $index $index $patch] [list $newfet]] ; # patch original mosfet and add new one

        # follow up with pulldown network
        set network [lindex $netlist 1] ; # pullup network is the 1st element in list

        # identify mosfet to "double"
        foreach mosfet $network {
            if {[lindex $mosfet 0] eq $gate} {
                set orgfet $mosfet
                break
            }
        }

        # prepare addition
        set newfet [lreplace $orgfet 0 0 $newgate]

        # extend pullup row
        set pulldown [concat $network [list $newfet]]

        set netlist [list [lsort -decreasing $pullup] [lsort $pulldown]]
    }
    # verbose message
    if {$verbose} {
        puts "enlarge_nor!: $netlist"
    }

    return $netlist
}

#   -------------------------------------------------------------------
#                       MAIN
#   -------------------------------------------------------------------

#   ------------    Command line parsing     --------------------------

package require cmdline;

#   define program options
set options {
    {s.arg "4"          "reduce number of stacked transistors - default" }
    {o.arg "./"         "specify output directory - default" }
    {v                  "verbose" }
}

#   define program usage
set usage "- Generate a bunch of combinatorial cells"

#   error trap
try {
    array set params [cmdline::getoptions argv $options $usage]
} trap {CMDLINE USAGE} {msg o} {
    # Trap the usage signal, print the massage, and exit the application.
    # Note: Others errors are not caught and passed through to higher levels!
    puts $msg
    exit -1 
}

#   set argv from command lines
set option_stacked $params(s) ; # number of stacked transistors
set option_path $params(o) ; # output directory
set verbose $params(v); 

#   verbose message
if {$verbose} {
    puts "[clock format [clock seconds] -gmt 1]"
    puts "option_stacked (-s): $option_stacked"
    puts "option_path (-o): $option_path"
}


#   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   SANDBOX


set seed $library(INV)
set cellid 1
export! $option_path INV $seed

set seed [enlarge_nand! $library(NAND2)]
while {$seed ne {} } {
    incr cellid
    export! $option_path $cellid $seed
    set seed [enlarge_nand! $seed]
}

set seed [enlarge_nor! $library(INV)]
while {$seed ne {} } {
    incr cellid
    export! $option_path $cellid $seed
    set seed [enlarge_nor! $seed]
}

