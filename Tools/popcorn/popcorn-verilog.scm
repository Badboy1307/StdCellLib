;;  ************    LibreSilicon's StdCellLibrary   *******************
;;
;;  Organisation:   Chipforge
;;                  Germany / European Union
;;
;;  Profile:        Chipforge focus on fine System-on-Chip Cores in
;;                  Verilog HDL Code which are easy understandable and
;;                  adjustable. For further information see
;;                          www.chipforge.org
;;                  there are projects from small cores up to PCBs, too.
;;
;;  File:           StdCellLib/Tools/popcorn/popcorn-verilog.scm
;;
;;  Purpose:        Scheme Module - export Verilog descriptions
;;
;;  ************    Revised^7 Report on Scheme (R7RS)   ***************
;;
;;  ///////////////////////////////////////////////////////////////////
;;
;;  Copyright (c)   2019 by
;;                  chipforge - <popcorn@nospam.chipforge.org>
;;
;;  This source file may be used and distributed without restriction
;;  provided that this copyright statement is not removed from the
;;  file and that any derivative work contains the original copyright
;;  notice and the associated disclaimer.
;;
;;  This source is free software; you can redistribute it and/or modify
;;  it under the terms of the GNU General Public License as published by
;;  the Free Software Foundation; either version 3 of the License, or
;;  (at your option) any later version.
;;
;;  This source is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;;  GNU General Public License for more details.
;;
;;   (__)  You should have received a copy of the GNU General Public
;;   oo )  License along with this program; if not, write to the
;;   /_/|  Free Software Foundation Inc., 51 Franklin St., 5th Floor,
;;         Boston, MA 02110-1301, USA
;;
;;  GNU General Public License v3.0 - http://www.gnu.org/licenses/gpl-3.0.html
;;  ///////////////////////////////////////////////////////////////////

(define-library (popcorn-verilog)
  (import (scheme base)
          (scheme char)            ; string-upcase
          (scheme write)           ; display
          (scheme file)            ; file io
          (srfi 28)                ; format
          ; popcorn libs also
          (popcorn-lib)
          (popcorn-cell)
  )
  (export  export-verilog-switch)
          ;export-verilog-stim)
  (begin

;;  ------------    build-in self test  -------------------------------

    ; use this switch during development only
    (define build-in-self-test #t)

;;  -------------------------------------------------------------------
;;                  WRITING CELL DESCRIPTIONS
;;  -------------------------------------------------------------------

;;  ------------    export verilog header   ---------------------------

;   Contract:
;   export-verilog-header : cell purspose-string-> --

;   Purpose:
;   generate Verilog Header on STDOUT

;   Example:
;   (export-verilog-header INV-cell "Verilog Model") => --

;   Definition:
    (define export-verilog-header
        (lambda (cell purpose-string)
            (let ((at-port current-output-port))
                (begin
                    (format (at-port)
"//  ************    LibreSilicon's StdCellLibrary   *******************
//
//  Organisation:   Chipforge
//                  Germany / European Union
//
//  Profile:        Chipforge focus on fine System-on-Chip Cores in
//                  Verilog HDL Code which are easy understandable and
//                  adjustable. For further information see
//                          www.chipforge.org
//                  there are projects from small cores up to PCBs, too.
//
//  Cell:           ~a
//
//  Purpose:        ~a
//                  proudly AUTOGENERATED by \"Popcorn\" R7RS Scheme tool
//
//  ************    IEEE Std 1364-1995 (Verilog '95 HDL)    ***********
//
//  ///////////////////////////////////////////////////////////////////
//
//  Copyright (c) ~d by chipforge <stdcelllib@nospam.chipforge.org>
//  All rights reserved.
//
//      This Standard Cell Library is licensed under the Libre Silicon
//      public license; you can redistribute it and/or modify it under
//      the terms of the Libre Silicon public license as published by
//      the Libre Silicon alliance, either version 1 of the License, or
//      (at your option) any later version.
//
//      This design is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//      See the Libre Silicon Public License for more details.
//
//  ///////////////////////////////////////////////////////////////////

//  -------------------------------------------------------------------
//                  ~a
//  -------------------------------------------------------------------

module "           (cell-id cell) purpose-string (copyleft-year) (string-upcase purpose-string))
                )
            )
        )
    )

;;  ------------    export verilog module   ---------------------------

;   Contract:
;   export-verilog-module : cell -> --

;   Purpose:
;   generate Verilog '95 module frame on STDOUT

;   Example:
;   (export-verilog-module INV-cell) => --

;   Definition:
    (define export-verilog-module
        (lambda (cell)
            (let ((at-port current-output-port))
                (format (at-port)
"(~a)
"                   (list->csv (append ((cell-outputs cell) (cell-inputs cell) (cell-clocks cell))))
                )
            )
        )
    )
;;  ------------    export verilog footer   ---------------------------

;   Contract:
;   export-verilog-footer : -> --

;   Purpose:
;   generate Verilog Footer on STDOUT

;   Example:
;   (export-verilog-footer) => --

;   Definition:
    (define export-verilog-footer
        (lambda ()
            (let ((at-port current-output-port))
                (begin
                    (format (at-port)
"endmodule
"                   )
                )
            )
        )
    )

;;  ------------    export verilog switch   ---------------------------

;   Contract:
;   export-verilog-switch : cell -> --

;   Purpose:
;   generate Verilog Switch level description on STDOUT

;   Example:
;   (export-verilog-switch INV-cell) => --"

;   Definition:
    (define export-verilog-switch
        (lambda (cell)
            (let ((at-port current-output-port))
                (begin
                    ; header
                    (export-verilog-header cell "Verilog Switch Model")
                    (export-verilog-module cell)
                    ; stages
                    ; footer
                    (export-verilog-footer)
                )
            )
        )
    )

;;  ===================================================================
;;                  END OF R7RS LIBRARY
;;  ===================================================================
  )
)
